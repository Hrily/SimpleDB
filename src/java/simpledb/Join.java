package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate predicate;
    private DbIterator child1, child2;
    
    Iterator<Tuple> tuples;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @author hrily
     * @param predicate
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate predicate, DbIterator child1, DbIterator child2) {
        this.predicate = predicate;
        this.child1 = child1;
        this.child2 = child2;
    }

    /**
     * @author hrily
     * @return The predicate used to join children
     */
    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @author hrily
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc td = child1.getTupleDesc();
        return td.getFieldName(predicate.getField1());
    }

    /**
     * @author hrily
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     */
    public String getJoinField2Name() {
        TupleDesc td = child2.getTupleDesc();
        return td.getFieldName(predicate.getField2());
    }

    /**
     * @author hrily
     * @return The Tuple desc of the join
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc td = TupleDesc.merge(child1.getTupleDesc(), 
                child2.getTupleDesc());
        return td;
    }

    /**
     * Open iterators
     * 
     * @author hrily
     * @throws DbException
     * @throws NoSuchElementException
     * @throws TransactionAbortedException 
     */
    @Override
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        tuples = predicate.applyAll(child1, child2).iterator();
    }

    /**
     * Close iterators
     * 
     * @author hrily
     */
    @Override
    public void close() {
        tuples = null;
        super.close();
    }

    /**
     * Rewind the iterators
     * 
     * @author hrily
     * @throws DbException
     * @throws TransactionAbortedException 
     */
    public void rewind() throws DbException, TransactionAbortedException {
        close();
        open();
    }
    
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(tuples == null || !tuples.hasNext())
            return null;
        Tuple tuple = tuples.next();
        /* 
         * Comment / Uncomment Following if required
         * Test cases doesn't remove duplicates
         */
        return tuple;
    }

    /**
     * @author hrily
     * @return return the children DbIterators of this operator. If there is
     *         only one child, return an array of only one element. For join
     *         operators, the order of the children is not important. But they
     *         should be consistent among multiple calls.
     * */
    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = {child1, child2};
        return children;
    }

    /**
     * Set the children(child) of this operator. If the operator has only one
     * child, children[0] should be used. If the operator is a join, children[0]
     * and children[1] should be used.
     * 
     * @author hrily
     * @param children
     *            the DbIterators which are to be set as the children(child) of
     *            this operator
     * */
    @Override
    public void setChildren(DbIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }

}
